%YAML 1.2
---
name: MC Function
file_extensions: [mcfunction]
scope: source.mcfunction

variables:
  selector_keyword: '[^\s,=\]]+'
  unquoted_char: '[a-zA-Z0-9._+\-]'

contexts:
  main:
    - match: ^\s*(\/)
      captures:
        1: invalid.illegal.starting-forward-slash.mcfunction
    - match: ^\s*((#~).*)$
      captures:
        1: comment.line.special.mcfunction keyword.other.special-comment.mcfunction
        2: punctuation.definition.comment.special.mcfunction
    - match: ^\s*((#).*)$
      captures:
        1: comment.line.pound-sign.mcfunction
        2: punctuation.definition.comment.pound-sign.mcfunction
    - match: ^\s*(?=\S)
      push: command
      with_prototype:
        - match: (?<=\n)
          pop: true
    - include: selector
    - include: operators
    - include: data_tag
    - include: rel_number
    - include: namespace
    - include: dot_name
    - include: blockstate
    - include: boolean
    - include: hidden_playername
  
  command:
    - match: (?<!\S)(\/)?(execute)(?!\S)
      captures:
        1: punctuation.other.command-start.mcfunction
        2: variable.function.command.mcfunction
      push:
        - match: (?<!\S)run(?!\S)
          scope: keyword.other.execute-run.mcfunction
          pop: true
        - match: (?<!\S)as(?!\S)
          scope: variable.function.subcommand.mcfunction
          push: player
        - match: (?<!\S)at(?!\S)
          scope: variable.function.subcommand.mcfunction
          push: player
        - match: (?<!\S)positioned as(?!\S)
          scope: variable.function.subcommand.mcfunction
          push: player
        - match: (?<!\S)positioned(?!\S)
          scope: variable.function.subcommand.mcfunction
          push: blockpos
        - match: (?<!\S)align(?!\S)
          scope: variable.function.subcommand.mcfunction
          push:
            - match: (?<!\S)(?:x(?:yz?|zy?)?|y(?:xz?|zx?)?|z(?:xy?|yx?)?)(?!\S)
              scope: entity.name.swizzle.mcfunction
              pop: true
        - match: (?<!\S)facing entity(?!\S)
          scope: variable.function.subcommand.mcfunction
          push: [anchor, player]
        - match: (?<!\S)facing(?!\S)
          scope: variable.function.subcommand.mcfunction
          push: blockpos
        - match: (?<!\S)rotated as(?!\S)
          scope: variable.function.subcommand.mcfunction
          push: player
        - match: (?<!\S)rotated(?!\S)
          scope: variable.function.subcommand.mcfunction
          push: rotation
        - match: (?<!\S)in(?!\S)
          scope: variable.function.subcommand.mcfunction
          push: 
            - match: (?<!\S)(?:overworld|the_end|the_nether)(?!\S)
              scope: entity.name.dimension.mcfunction
              pop: true
        - match: (?<!\S)anchored(?!\S)
          scope: variable.function.subcommand.mcfunction
          push: anchor
        - match: (?<!\S)(?:if|unless)(?!\S)
          scope: variable.function.subcommand.mcfunction
          push:
            - match: (?<!\S)block(?!\S)
              scope: variable.function.subcommand.mcfunction
              set: [namespace_name, blockpos]
            - match: (?<!\S)blocks(?!\S)
              scope: variable.function.subcommand.mcfunction
              set: [masked, blockpos, blockpos, blockpos]
            - match: (?<!\S)entity(?!\S)
              scope: variable.function.subcommand.mcfunction
              set: player
            - match: (?<!\S)score(?!\S)
              scope: variable.function.subcommand.mcfunction
              set: [_if_score_cont, objective, player]
        - match: (?<!\S)store(?!\S)
          scope: variable.function.subcommand.mcfunction
          push:
            - match: (?<!\S)(?:result|success)(?!\S)
              scope: entity.name.stat-type.mcfunction
              set:
                - match: (?<!\S)score(?!\S)
                  scope: entity.name.store-type.score.mcfunction
                  set: [objective, player]
                - match: (?<!\S)block(?!\S)
                  scope: entity.name.store-type.block.mcfunction
                  set: [number, nbt_number_type, nbt_path, blockpos]
                - match: (?<!\S)entity(?!\S)
                  scope: entity.name.store-type.entity.mcfunction
                  set: [number, nbt_number_type, nbt_path, selector]
                - match: (?<!\S)bossbar(?!\S)
                  scope: entity.name.store-type.entity.mcfunction
                  set: [bossbar_value, namespace_name]
            
    - match: (?<=\S)\s*(detect)(?!\S)
      captures:
        1: variable.function.command.mcfunction
      set: [command, blockstate_or_data, namespace_name, rel_number, rel_number, rel_number]
    - match: (?<!\S)(\/)?(tellraw)(?!\S)
      captures:
        1: punctuation.other.command-start.mcfunction
        2: variable.function.command.mcfunction
      set: [JSON.sublime-syntax, player]
    - match: \b(\/)?(title)\b
      captures:
        1: punctuation.other.command-start.mcfunction
        2: variable.function.command.mcfunction
      set: [_title_command_enum, player]
    - match: \b(\/)?(\S+)\b
      captures:
        1: punctuation.other.command-start.mcfunction
        2: variable.function.command.mcfunction
      pop: true
  
  _if_score_cont:
    - match: (?<!\S)(?:<|<=|=|>=|>)(?!\S)
      scope: keyword.operator.comparison.mcfunction
      set: [objective, player]
    - match: (?<!\S)matches(?!\S)
      scope: entity.name.matches.mcfunction
      set: int_range
  
  _title_command_enum:
    - match: (?<=\s)(?:title|subtitle|actionbar)(?=\s)
      set: JSON.sublime-syntax
    - match: (?=\S)
      pop: true
  
  boolean:
    - match: (?<!\S)true(?!\S)
      scope: constant.language.boolean.true.mcfunction
    - match: (?<!\S)false(?!\S)
      scope: constant.language.boolean.false.mcfunction
  
  operators:
    - match: (?<!\S)=(?!\S)
      scope: keyword.operator.assignment.mcfunction
    - match: (?<!\S)[+\-*/%]=(?!\S)
      scope: keyword.operator.arithmetic.mcfunction
    - match: (?<!\S)[<>](?!\S)
      scope: keyword.operator.comparison.mcfunction
    - match: (?<!\S)><(?!\S)
      scope: keyword.operator.swap.mcfunction
  
  dot_name:
    - match: ([^\s\.]+)(\.)(?!\S)
      captures:
        1: entity.name.enum.mcfunction
        2: punctuation.accessor.dot-name.mcfunction
      pop: true
    - match: ([^\s\.]+)(\.)
      captures:
        1: entity.name.enum.mcfunction
        2: punctuation.accessor.dot-name.mcfunction
    - match: (?<=\.)([^\s\.]+)(?=\s|$)
      captures:
        1: entity.name.enum.mcfunction
      pop: true
  
  selector: # TODO 1.13
    - match: '(?<!\S)((@)[a-z])(\[)'
      captures:
        1: entity.name.selector.mcfunction
        2: punctuation.definition.selector.mcfunction
        3: punctuation.section.brackets.begin.selector-args.mcfunction
      set:
        - meta_scope: meta.selector.mcfunction
        - match: \](?!\S)
          scope: punctuation.section.brackets.end.selector-args.mcfunction
          pop: true
        - match: \s
          scope: invalid.illegal.space-in-selector.mcfunction
          pop: true
        - match: ','
          scope: punctuation.separator.selector.mcfunction
        - match: '(score_)({{selector_keyword}}?)(_min)?(=)'
          captures:
            1: variable.language.selector.score-begin.mcfunction
            2: variable.other.member.selector.objective.mcfunction
            3: variable.language.selector.score-min.mcfunction
            4: punctuation.separator.key-value.selector.mcfunction
        - match: ({{selector_keyword}})(=)
          captures:
            1: variable.language.selector.mcfunction
            4: punctuation.separator.key-value.selector.mcfunction
        - match: '[+-]?\d+'
          scope: constant.numeric.integer.mcfunction
        - match: '!'
          scope: keyword.operator.logical.negative.selector.mcfunction
        - match: "{{selector_keyword}}"
          scope: string.unquoted.selector.mcfunction
    - match: '(?<!\S)(@)[a-z]'
      scope: entity.name.selector.mcfunction
      captures:
        1: punctuation.definition.selector.mcfunction
      pop: true
  
  player:
    - include: selector
    - include: hidden_playername
    - match: \S+
      pop: true
  
  hidden_playername:
    - match: (#)\S+
      captures:
        1: keyword.other.hidden-playername.mcfunction
      pop: true
  
  objective:
    - match: '(?<!\S){{unquoted_char}}+(?!\S)'
      scope: variable.other.objective.mcfunction
      pop: true
    - match: '(?<!\S){{unquoted_char}}*(\S)'
      captures:
        1: invalid.illegal.invalid-character.mcfunction
  
  anchor:
    - match: (?<!\S)(?:eyes|feet)(?!\S)
      scope: entity.name.anchor.mcfunction
      pop: true
  
  masked:
    - match: (?<!\S)(?:all|masked)(?!\S)
      scope: entity.name.masked.mcfunction
      pop: true
  
  bossbar_value:
    - match: (?<!\S)(?:value|max)(?!\S)
      scope: entity.name.bossbar-value.mcfunction
      pop: true
  
  number:
    - match: (?<!\S)-?(?:\d+)?\.\d+(?!\S)
      scope: constant.numeric.float.mcfunction
      pop: true
    - match: (?<!\S)-?\d+(?!\S)
      scope: constant.numeric.integer.mcfunction
      pop: true
  
  int_range:
    - match: (?<!\w)(-?\d+)(?:(\.\.)(-?\d+\b)?)?(?!\w)
      captures:
        1: constant.numeric.integer.mcfunction
        2: keyword.other.range.mcfunction
        3: constant.numeric.integer.mcfunction
      pop: true
    - match: (?<!\w)(\.\.)(-?\d+\b)(?!\w)
      captures:
        1: keyword.other.range.mcfunction
        2: constant.numeric.integer.mcfunction
      pop: true
  
  rel_number:
    - match: (?<!\S)(~)([+-]?(?:\d+)?\.\d+)(?!\S)
      captures:
        1: keyword.operator.relative.mcfunction
        2: constant.numeric.float.mcfunction
      pop: true
    - match: (?<!\S)(~)([+-]?\d+)(?!\S)
      captures:
        1: keyword.operator.relative.mcfunction
        2: constant.numeric.integer.mcfunction
      pop: true
    - match: (?<!\S)~(?!\S)
      scope: keyword.operator.relative.mcfunction
      pop: true
    - include: number
  
  blockpos:
    - match: (?=\S)
      set: [rel_number, rel_number, rel_number]
  
  rotation:
    - match: (?=\S)
      set: [rel_number, rel_number]
  
  asterisk:
    - match: (?<=\s)\*(?=\s|$)
      scope: constant.other.select-all.mcfunction
      pop: true
  
  blockstate_or_data:
    - include: number
    - include: blockstate
  
  blockstate:
    - include: asterisk
    - match: \bdefault\b
      scope: variable.language.blockstate.default.mcfunction
      pop: true
    - match: (?=[^\s=,]+=)
      set:
        - meta_scope: meta.structure.blockstate.mcfunction
        - match: '([^\s=,]+)(=)([^\s=,]+)(,)'
          captures:
            1: variable.language.blockstate.key.mcfunction
            2: punctuation.separator.key-value.blockstate.mcfunction
            3: string.unquoted.blockstate.mcfunction
            4: punctuation.separator.values.blockstate.mcfunction
        - match: '([^\s=,]+)(=)([^\s=,]+)?'
          captures:
            1: variable.language.blockstate.key.mcfunction
            2: punctuation.separator.key-value.blockstate.mcfunction
            3: string.unquoted.blockstate.mcfunction
          pop: true
        - match: (?=\s)
          pop: true
  
  namespace:
    - match: (\w+)(:)
      captures:
        1: entity.name.namespace.mcfunction
        2: punctuation.accessor.namespace.mcfunction
  
  namespace_name:
    - match: (?<!\S)(?:(\w+)(:))?(\S+)
      captures:
        1: entity.name.namespace.mcfunction
        2: punctuation.accessor.namespace.mcfunction
      pop: true
  
  nbt_number_type:
    - match: (?<!\S)(?:byte|double|float|int|long|short)(?!\S)
      scope: entity.name.type.nbt-number.mcfunction
      pop: true
  
  nbt_path:
    - match: (?=[^.\s])
      set:
        - meta_scope: meta.path.nbt-path.mcfunction
        - match: (?=\s)
          pop: true
        - match: (?="|{{unquoted_char}})
          push: [_nbt_path_connector, _nbt_path_string]
        - match: (?=\[)
          push: [_nbt_path_connector, _nbt_path_array]
  _nbt_path_connector:
    - match: (?=\s)
      pop: true
    - match: \.(?!\s)
      scope: punctuation.accessor.dot.nbt-path.mcfunction
      set: [_nbt_path_connector, _nbt_path_string]
    - match: (?=\[)
      set: [_nbt_path_connector, _nbt_path_array]
  _nbt_path_string:
    - match: '"'
      scope: punctuation.definition.string.begin.nbt-path.mcfunction
      set:
        - meta_scope: string.quoted.double.nbt-path.mcfunction
        - match: '"'
          captures:
            1: punctuation.definition.string.end.nbt-path.mcfunction
            2: punctuation.accessor.dot.nbt-path.mcfunction
          pop: true
        - match: '"'
          scope: punctuation.definition.string.end.nbt-path.mcfunction
          pop: true
        - match: \\.
          scope: constant.character.escape.nbt-path.mcfunction
    - match: '[a-zA-Z0-9_+\-]+'
      scope: string.unquoted.nbt-path.mcfunction
      pop: true
  _nbt_path_array:
    - match: (\[)(\d+)(\])
      scope: meta.brackets.nbt-path.mcfunction
      captures:
        1: punctuation.section.brackets.begin.nbt-path.mcfunction
        2: constant.numeric.integer.nbt-path.mcfunction
        3: punctuation.section.brackets.end.nbt-path.mcfunction
      pop: true
  
  data_tag:
    - match: (?={)
      push: nbt_compound
      with_prototype:
        - match: \n
          scope: invalid.illegal.unfinished-nbt.mcfunction
          pop: true
        - match: (?<=\n)
          pop: true
  
  nbt_compound:
    - match: \{
      scope: punctuation.section.braces.begin.compound.nbt.mcfunction
      set:
        - meta_scope: meta.braces.compound.nbt.mcfunction
        - match: \}
          scope: punctuation.section.braces.end.compound.nbt.mcfunction
          pop: true
        - match: (?=\S)
          push: [_nbt_compound_comma, nbt, _nbt_compound_colon, _nbt_compound_key]
  _nbt_compound_key:
    - match: '"'
      scope: punctuation.definition.string.begin.nbt.mcfunction
      set:
        - meta_scope: string.quoted.double.nbt.mcfunction variable.other.nbt-key.mcfunction
        - match: '"'
          scope: punctuation.definition.string.end.nbt.mcfunction
          pop: true
        - match: \\.
          scope: constant.character.escape.nbt.mcfunction
    - match: '[a-zA-Z0-9._+\-]+'
      scope: string.unquoted.nbt.mcfunction variable.other.nbt-key.mcfunction
      pop: true
    - match: \S
      scope: invalid.illegal.invalid-key.nbt.mcfunction
  _nbt_compound_colon:
    - match: ':'
      scope: punctuation.separator.key-value.compound.mcfunction
      pop: true
    - match: \S
      scope: invalid.illegal.expected-colon.nbt.mcfunction
  _nbt_compound_comma:
    - match: ','
      scope: punctuation.separator.values.compound.mcfunction
      pop: true
    - match: (?=})
      pop: true
    - match: \S
      scope: invalid.illegal.expected-comma.nbt.mcfunction
  nbt_list:
    - match: (\[)(?:([IBL])(;))?
      captures:
        1: punctuation.section.brackets.begin.list.nbt.mcfunction
        2: storage.modifier.array-type.nbt.mcfunction
        3: punctuation.separator.array-type.nbt.mcfunction
      set:
        - meta_scope: meta.brackets.list.nbt.mcfunction
        - match: \]
          scope: punctuation.section.brackets.end.list.nbt.mcfunction
          pop: true
        - match: (?=\S)
          push: [_nbt_list_comma, nbt]
  _nbt_list_comma:
    - match: ','
      scope: punctuation.separator.values.list.mcfunction
      pop: true
    - match: (?=])
      pop: true
    - match: \S
      scope: invalid.illegal.expected-comma.nbt.mcfunction
  nbt_boolean: # Technically a byte, but they look different
    - match: (?i)\btrue\b
      scope: constant.numeric.byte.boolean.true.nbt.mcfunction
      pop: true
    - match: (?i)\bfalse\b
      scope: constant.numeric.byte.boolean.false.nbt.mcfunction
      pop: true
  nbt_byte:
    - match: '[+-]?(?:0|[1-9]\d*)[bB]\b(?=[^\.eE])'
      scope: constant.numeric.byte.nbt.mcfunction
      pop: true
    - include: nbt_boolean
  nbt_short:
    - match: '[+-]?(?:0|[1-9]\d*)[sS]\b(?=[^\.eE])'
      scope: constant.numeric.short.nbt.mcfunction
      pop: true
  nbt_long:
    - match: '[+-]?(?:0|[1-9]\d*)[lL]\b(?=[^\.eE])'
      scope: constant.numeric.long.nbt.mcfunction
      pop: true
  nbt_int:
    - match: '[+-]?(?:0|[1-9]\d*)\b(?=[^\.eE])'
      scope: constant.numeric.integer.nbt.mcfunction
      pop: true
  nbt_float:
    - match: '[+-]?(?:\d+\.\d+|\.\d+|\d+\.|\d+)(?:[eE][+-]?\d+)?[fF]\b'
      scope: constant.numeric.float.nbt.mcfunction
      pop: true
  nbt_double:
    - match: '[+-]?(?:\d+\.\d+|\.\d+|\d+\.)(?:[eE][+-]?\d+)?[dD]?\b'
      scope: constant.numeric.double.nbt.mcfunction
      pop: true
    - match: '[+-]?\d+(?:[eE][+-]?\d+[dD]|[dD])?\b'
      scope: constant.numeric.double.nbt.mcfunction
      pop: true
  nbt_number:
    - include: nbt_byte
    - include: nbt_short
    - include: nbt_long
    - include: nbt_int
    - include: nbt_float
    - include: nbt_double
  nbt_string:
    - match: '"'
      scope: punctuation.definition.string.begin.nbt.mcfunction
      set:
        - meta_scope: string.quoted.double.nbt.mcfunction
        - match: '"'
          scope: punctuation.definition.string.end.nbt.mcfunction
          pop: true
        - match: \\.
          scope: constant.character.escape.nbt.mcfunction
    - match: '{{unquoted_char}}+'
      scope: string.unquoted.nbt.mcfunction
      pop: true
  nbt:
    - include: nbt_compound
    - include: nbt_list
    - include: nbt_number
    - include: nbt_string
    - match: \S
      scope: invalid.illegal.illegal-character.mcfunction
